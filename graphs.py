# -*- coding: utf-8 -*-
"""GRAPHS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sT3M7Fkh39JKcv_FkoEtUx3_ZxgolVKu
"""



import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
amounts = [25, 50, 30]
# Create a bar chart
plt.bar(categories, amounts)
# Adding labels
plt.xlabel('Categories')
plt.ylabel('Amounts')
plt.title('Bar Chart of Amounts by Category')
# Show the plot
plt.show()



import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
amounts = [25, 50, 30]
# Create a pie chart
plt.pie(amounts, labels=categories, autopct='%1.1f%%')
# Adding a title
plt.title('Pie Chart of Amounts by Category')
# Show the plot
plt.show()



import matplotlib.pyplot as plt
# Sample data
years = [2010, 2011, 2012, 2013, 2014]
amounts = [100, 120, 140, 110, 150]
# Create a line chart
plt.plot(years, amounts, marker='o', linestyle='-')
# Adding labels and a title
plt.xlabel('Year')
plt.ylabel('Amount')

plt.title('Line Chart of Amounts Over Time')
# Show the plot
plt.grid(True) # Add a grid for better readability
plt.show()



import matplotlib.pyplot as plt
# Sample data
x = [10, 20, 30, 40, 50]
y = [50, 40, 30, 20, 10]
# Create a scatter plot
plt.scatter(x, y)
# Adding labels and a title
plt.xlabel('X-Axis')
plt.ylabel('Y-Axis')
plt.title('Scatter Plot of X vs. Y')
# Show the plot
plt.grid(True) # Add a grid for better readability
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Generate random data for demonstration
data = np.random.randn(1000) # Replace with your dataset
# Create a histogram
plt.hist(data, bins=20, edgecolor='k')
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of Data')
# Show the plot
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Generate random data following a normal distribution
mu, sigma = 0, 1
data = np.random.normal(mu, sigma, 1000)
# Create a histogram
plt.hist(data, bins=30, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of a Normal Distribution')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate random data following a uniform distribution
low, high = 0, 10
data = np.random.uniform(low, high, 1000)
# Create a histogram
plt.hist(data, bins=20, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of a Uniform Distribution')
# Show the plot
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Generate random data following an exponential distribution
scale = 1.0
data = np.random.exponential(scale, 1000)
# Create a histogram
plt.hist(data, bins=20, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of an Exponential Distribution')
# Show the plot
plt.grid(True)
plt.show()



import seaborn as sns
import numpy as np
# Generate random data following a normal distribution
mu, sigma = 0, 1
data = np.random.normal(mu, sigma, 1000)
# Create a KDE plot
sns.kdeplot(data, shade=True)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Density')
plt.title('Kernel Density Estimation (KDE) Plot of a Normal Distribution')
# Show the plot
plt.show()



import seaborn as sns
# Generate random data for two different distributions
data1 = np.random.normal(0, 1, 1000)
data2 = np.random.normal(2, 1, 1000)
# Create a box plot to compare the two distributions
sns.boxplot(data=[data1, data2])
# Adding labels and a title
plt.xlabel('Distribution')
plt.ylabel('Value')
plt.title('Box Plot Comparison of Two Distributions')
# Show the plot
plt.show()



import matplotlib.pyplot as plt
# Sample data representing proportions
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a pie chart
plt.pie(proportions, labels=categories, autopct='%1.1f%%')

# Adding a title
plt.title('Pie Chart of Proportions')
# Show the plot
plt.show()



import matplotlib.pyplot as plt
# Sample data representing proportions for multiple categories
categories = ['Category A', 'Category B', 'Category C']
proportions1 = [0.2, 0.4, 0.1]
proportions2 = [0.3, 0.2, 0.4]
# Create a stacked bar chart
plt.bar(categories, proportions1, label='Group 1')
plt.bar(categories, proportions2, bottom=proportions1, label='Group 2')
# Adding labels and a legend
plt.xlabel('Categories')
plt.ylabel('Proportions')
plt.title('Stacked Bar Chart of Proportions')
plt.legend()
# Show the plot
plt.show()



import matplotlib.pyplot as plt
# Sample data representing proportions
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a horizontal bar chart
plt.barh(categories, proportions)
# Adding labels and a title
plt.xlabel('Proportions')
plt.ylabel('Categories')
plt.title('Horizontal Bar Chart of Proportions')
# Show the plot
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Sample data representing proportions over time
years = [2010, 2011, 2012, 2013, 2014]
proportions1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])
proportions2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6])
# Create a stacked area chart
plt.stackplot(years, proportions1, proportions2, labels=['Group 1', 'Group 2'], alpha=0.5)

# Adding labels and a legend
plt.xlabel('Year')
plt.ylabel('Proportions')
plt.title('Stacked Area Chart of Proportions Over Time')
plt.legend(loc='upper left')
# Show the plot
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Generate sample data for two variables with a positive association
x = np.random.rand(100)
y = 2 * x + np.random.rand(100)
# Create a scatter plot
plt.scatter(x, y)
# Adding labels and a title
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Scatter Plot for Bivariate Association')
# Show the plot
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Generate sample time series data
time = np.arange(0, 10, 0.1)
data = np.sin(time)
# Create a line plot
plt.plot(time, data)
# Adding labels and a title
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('Line Plot for Time Series Data')

# Show the plot
plt.grid(True)
plt.show()



import seaborn as sns
import numpy as np
# Generate a random correlation matrix
corr_matrix = np.corrcoef(np.random.rand(5, 5))
# Create a heatmap
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)
# Adding a title
plt.title('Heatmap of Correlation Matrix')
# Show the plot
plt.show()



import seaborn as sns
# Load a sample dataset with multiple variables
data = sns.load_dataset("iris")
# Create a pair plot to visualize associations between variables
sns.pairplot(data, hue="species")
# Adding a title
plt.suptitle('Pair Plot of Iris Dataset', y=1.02)
# Show the plot
plt.show()



import seaborn as sns
import matplotlib.pyplot as plt
# Load a sample dataset with categorical and numeric variables
data = sns.load_dataset("tips")
# Create a box plot to visualize the association between a categorical
#variable and a numeric variable
sns.boxplot(x="day", y="total_bill", data=data)
# Adding labels and a title
plt.xlabel('Day of the Week')
plt.ylabel('Total Bill Amount')
plt.title('Box Plot of Total Bill Amount by Day')
# Show the plot
plt.show()



import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# Generate a sample time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
time_series_data = np.random.randn(len(date_rng))
# Create a time series DataFrame
time_series_df = pd.DataFrame(time_series_data, index=date_rng,
columns=['Value'])
# Create a line plot
plt.figure(figsize=(12, 6))
plt.plot(time_series_df.index, time_series_df['Value'])
# Adding labels and a title
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Line Plot of Time Series Data')
# Show the plot
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# Generate a sample time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
time_series_data = np.random.randn(len(date_rng)).cumsum()
# Create a time series DataFrame
time_series_df = pd.DataFrame(time_series_data, index=date_rng,
columns=['Cumulative Value'])
# Create an area plot
plt.figure(figsize=(12, 6))
plt.fill_between(time_series_df.index, time_series_df['Cumulative Value'],
color='skyblue')
# Adding labels and a title
plt.xlabel('Date')
plt.ylabel('Cumulative Value')
plt.title('Area Plot of Cumulative Time Series Data')
# Show the plot
plt.grid(True)

plt.show()



import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# Generate a sample multivariate time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
data = {
'Value1': np.random.randn(len(date_rng)),
'Value2': np.random.randn(len(date_rng))
}
# Create a time series DataFrame
time_series_df = pd.DataFrame(data, index=date_rng)
# Create multiple line plots on the same axis
plt.figure(figsize=(12, 6))
plt.plot(time_series_df.index, time_series_df['Value1'], label='Value1')
plt.plot(time_series_df.index, time_series_df['Value2'], label='Value2')
# Adding labels, a legend, and a title
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Multiple Line Plots of Multivariate Time Series Data')
plt.legend()
# Show the plot
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import pandas as pd
from statsmodels.tsa.seasonal import seasonal_decompose
import numpy as np
# Generate a sample time series dataset with seasonality
date_rng = pd.date_range(start='2022-01-01', periods=730, freq='D')
seasonality = np.sin(2 * np.pi * date_rng.dayofyear / 365)
time_series_data = np.random.randn(len(date_rng)) + 0.2 * seasonality
# Create a time series DataFrame
time_series_df = pd.DataFrame(time_series_data, index=date_rng,
columns=['Value'])
# Decompose the time series into trend, seasonal, and residual components
result = seasonal_decompose(time_series_df['Value'], model='additive',
period=365)
# Plot the decomposed components
plt.figure(figsize=(12, 8))
plt.subplot(411)
plt.plot(time_series_df.index, result.observed, label='Observed')
plt.ylabel('Observed')
plt.title('Seasonal Decomposition of Time Series Data')
plt.subplot(412)
plt.plot(time_series_df.index, result.trend, label='Trend')
plt.ylabel('Trend')

plt.subplot(413)
plt.plot(time_series_df.index, result.seasonal, label='Seasonal')
plt.ylabel('Seasonal')
plt.subplot(414)
plt.plot(time_series_df.index, result.resid, label='Residual')
plt.ylabel('Residual')
plt.xlabel('Date')
plt.tight_layout()
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
# Sample data
data = {'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04'], 'Value': [10, 15, 8, 12]}
df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date']) # Convert Date column to datetime
# Create a line plot
plt.figure(figsize=(10, 6))
plt.plot(df['Date'], df['Value'], marker='o', linestyle='-')
plt.title('Trend Over Time')
plt.xlabel('Date')
plt.ylabel('Value')
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
sales = [500, 750, 600]
# Create a bar chart
plt.figure(figsize=(8, 6))
plt.bar(categories, sales, color='skyblue')
plt.title('Sales by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Generate sample data
np.random.seed(0)
age = np.random.randint(18, 65, 50)
income = 30000 + 1500 * age + np.random.normal(0, 10000, 50)
# Create a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(age, income, alpha=0.6)
plt.title('Age vs. Income')
plt.xlabel('Age')
plt.ylabel('Income')
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Generate sample data
np.random.seed(0)
scores = np.random.normal(70, 10, 100)
# Create a histogram
plt.figure(figsize=(8, 6))
plt.hist(scores, bins=20, edgecolor='k')
plt.title('Exam Score Distribution')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()



import seaborn as sns
import pandas as pd
# Sample data
data = sns.load_dataset('iris')
# Create a pair plot
sns.set(style="ticks")
sns.pairplot(data, hue="species")
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Sample data
x = np.linspace(0, 10, 100)
y = np.sin(x)
confidence_interval = 0.1 * np.sin(x)
# Create a line plot with confidence intervals
plt.figure(figsize=(10, 6))
plt.plot(x, y, label='Mean', color='b')
plt.fill_between(x, y - confidence_interval, y + confidence_interval, alpha=0.2, color='g',
label='Confidence Interval')
plt.title('Line Plot with Confidence Intervals')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Sample data
x = np.arange(1, 6)
y = np.array([2.5, 4.0, 3.5, 5.0, 4.8])
y_error = np.array([0.2, 0.3, 0.1, 0.4, 0.15])
# Create a scatter plot with error bars
plt.figure(figsize=(8, 6))
plt.errorbar(x, y, yerr=y_error, fmt='o', capsize=5, color='b', label='Data with Error Bars')
plt.title('Scatter Plot with Error Bars')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import numpy as np
# Sample data with multiple distributions
data = [np.random.normal(0, 1, 100), np.random.normal(3, 1, 100), np.random.normal(7, 2, 100)]
# Create a box plot
plt.figure(figsize=(8, 6))
plt.boxplot(data, vert=False, labels=['A', 'B', 'C'])
plt.title('Box Plot of Data Distributions')
plt.xlabel('Value')
plt.grid(True)

plt.show()



import seaborn as sns
import numpy as np
# Generate sample data
data = np.random.normal(0, 1, 1000)
# Create a KDE plot
sns.set_style('whitegrid')
plt.figure(figsize=(8, 6))
sns.kdeplot(data, shade=True)
plt.title('Kernel Density Estimation (KDE) Plot')
plt.xlabel('Value')
plt.ylabel('Density')
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt
import pandas as pd
# Sample data
data = {'CarType': ['Sedan', 'SUV', 'Truck', 'Hatchback', 'Sedan'],
'Frequency': [25, 15, 10, 20, 30]}
df = pd.DataFrame(data)
# Create a bar plot
plt.figure(figsize=(8, 6))
plt.bar(df['CarType'], df['Frequency'], color='skyblue')
plt.title('Distribution of Car Types')
plt.xlabel('Car Type')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()



import matplotlib.pyplot as plt
import pandas as pd
# Sample data
data = {'Month': ['Jan', 'Feb', 'Mar', 'Apr'],
'Product_A': [100, 120, 80, 90],
'Product_B': [80, 90, 110, 100],
'Product_C': [70, 95, 85, 75]}
df = pd.DataFrame(data)
# Create a grouped bar plot
plt.figure(figsize=(10, 6))
bar_width = 0.2
index = df.index
plt.bar(index - bar_width, df['Product_A'], bar_width, label='Product A')
plt.bar(index, df['Product_B'], bar_width, label='Product B')
plt.bar(index + bar_width, df['Product_C'], bar_width, label='Product C')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.title('Monthly Sales Comparison')
plt.xticks(index, df['Month'])
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()



import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a pie chart
plt.figure(figsize=(8, 6))
plt.pie(proportions, labels=categories, autopct='%1.1f%%', startangle=90, colors=['lightcoral',
'lightskyblue', 'lightgreen'])
plt.title('Category Proportions')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

import seaborn as sns

# Sample data
data = sns.load_dataset('tips')
# Create a box plot
sns.set(style='whitegrid')
plt.figure(figsize=(8, 6))
sns.boxplot(x='day', y='total_bill', data=data, palette='Set2')
plt.title('Box Plot of Total Bill Amount by Day')
plt.xlabel('Day of the Week')
plt.ylabel('Total Bill Amount ($)')
plt.show()



import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a pie chart
plt.figure(figsize=(8, 6))
plt.pie(proportions, labels=categories, autopct='%1.1f%%', startangle=90, colors=['lightcoral',
'lightskyblue', 'lightgreen'])
plt.title('Category Proportions')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()



import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a bar chart
plt.figure(figsize=(8, 6))
plt.bar(categories, proportions, color=['lightcoral', 'lightskyblue', 'lightgreen'])
plt.title('Category Proportions')
plt.xlabel('Category')
plt.ylabel('Proportion')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()



import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
subcategories = ['Subcategory 1', 'Subcategory 2', 'Subcategory 3']
proportions = [[0.2, 0.1, 0.1], [0.1, 0.2, 0.0], [0.1, 0.0, 0.2]]
# Create a stacked bar chart
plt.figure(figsize=(10, 6))
bottom = [0] * len(subcategories)
colors = ['lightcoral', 'lightskyblue', 'lightgreen']
for i, category in enumerate(categories):
  plt.bar(subcategories, proportions[i], label=category, bottom=bottom, color=colors[i])
  bottom = [sum(x) for x in zip(bottom, proportions[i])]
plt.title('Proportions in Subcategories by Category')
plt.xlabel('Subcategory')
plt.ylabel('Proportion')
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
# Sample data
data = {'Date': ['2023-01-01', '2023-01-02', '2023-01-03'],
'Category_A': [0.4, 0.3, 0.5],
'Category_B': [0.3, 0.4, 0.2],
'Category_C': [0.3, 0.3, 0.3]}
df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date'])
# Create a stacked area chart
plt.figure(figsize=(10, 6))
plt.stackplot(df['Date'], df['Category_A'], df['Category_B'], df['Category_C'], labels=['Category A',
'Category B', 'Category C'], alpha=0.7)
plt.title('Stacked Area Chart of Proportions Over Time')
plt.xlabel('Date')
plt.ylabel('Proportion')

plt.legend(loc='upper left')
plt.grid(True)
plt.show()